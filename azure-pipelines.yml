trigger:
  branches:
    include:
      - main

schedules:
  - cron: '*/5 * * * *'
    displayName: 'Import press releases'
    branches:
      include:
        - main
    always: true

pool:
  name: 'azureagent'

jobs:
- job: BuildAndNotify
  displayName: 'Build and Notify on Success or Failure'
  steps:
  - checkout: self

  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install Node.js'

  - script: |
      npm install
      npm run build
    displayName: 'npm install and build'

  - script: |
      sudo apt-get update
      sudo apt-get install -y wget apt-transport-https software-properties-common
      wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
      sudo dpkg -i packages-microsoft-prod.deb
      sudo apt-get update
      sudo apt-get install -y powershell
    displayName: 'Install PowerShell Core'

  # - task: PowerShell@2
  #   condition: failed()  # Send email only on failure
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       $emailFrom = "sarthakpokhrel8@gmail.com"
  #       $emailTo = "sarthakpokhrel3@gmail.com"
  #       $smtpServer = "smtp.gmail.com"
  #       $smtpUsername = "sarthakpokhrel8@gmail.com"
  #       $smtpPassword = "esvpvqnydnstlryw"

  #       $subject = "Azure Pipeline Build Failed"
  #       $body = "The build for branch $(Build.SourceBranch) in pipeline $(System.DefinitionName) has failed. Check details at $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"

  #       $smtpClient = New-Object Net.Mail.SmtpClient($smtpServer, 587)
  #       $smtpClient.EnableSsl = $true
  #       $smtpClient.Credentials = New-Object System.Net.NetworkCredential($smtpUsername, $smtpPassword)
  #       $smtpClient.Send($emailFrom, $emailTo, $subject, $body)
  #   displayName: 'Send Email Notification on Failure'

  - task: PowerShell@2
    condition: always()
    inputs:
      targetType: 'inline'
      script: |
        $maxExecutionTime = 5  # Set your max execution time in minutes
        $startTime = [System.DateTime]::Parse($(Build.StartTime))
        $endTime = Get-Date
        $duration = New-TimeSpan -Start $startTime -End $endTime
        $durationMinutes = $duration.TotalMinutes

        if ($durationMinutes -gt $maxExecutionTime) {
          $emailFrom = "sarthakpokhrel8@gmail.com"
          $emailTo = "sarthakpokhrel3@gmail.com"
          $smtpServer = "smtp.gmail.com"
          $smtpUsername = "sarthakpokhrel8@gmail.com"
          $smtpPassword = "esvpvqnydnstlryw"

          $subject = "Azure Pipeline Execution Delayed"
          $body = "The build for branch $(Build.SourceBranch) in pipeline $(System.DefinitionName) is taking longer than expected ($durationMinutes minutes). Check details at $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"

          $smtpClient = New-Object Net.Mail.SmtpClient($smtpServer, 587)
          $smtpClient.EnableSsl = $true
          $smtpClient.Credentials = New-Object System.Net.NetworkCredential($smtpUsername, $smtpPassword)
          $smtpClient.Send($emailFrom, $emailTo, $subject, $body)
        }
    displayName: 'Send Email Notification on Delayed Execution'

  - task: PowerShell@2
    condition: and(succeeded(), ne(variables['Build.Reason'], 'Schedule'))
    inputs:
      targetType: 'inline'
      script: |
        $emailFrom = "sarthakpokhrel8@gmail.com"
        $emailTo = "sarthakpokhrel3@gmail.com"
        $smtpServer = "smtp.gmail.com"
        $smtpUsername = "sarthakpokhrel8@gmail.com"
        $smtpPassword = "esvpvqnydnstlryw"

        $subject = "Azure Pipeline Build Succeeded - Manual Trigger"
        $body = "The build for branch $(Build.SourceBranch) in pipeline $(System.DefinitionName) succeeded and was manually triggered. Check details at $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"

        $smtpClient = New-Object Net.Mail.SmtpClient($smtpServer, 587)
        $smtpClient.EnableSsl = $true
        $smtpClient.Credentials = New-Object System.Net.NetworkCredential($smtpUsername, $smtpPassword)
        $smtpClient.Send($emailFrom, $emailTo, $subject, $body)
    displayName: 'Send Email Notification on Manual Trigger'

